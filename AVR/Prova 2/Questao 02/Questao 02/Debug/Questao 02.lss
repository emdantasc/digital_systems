
Questao 02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010a  0080010a  000004b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e3  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00000e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048b  00000000  00000000  00001559  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ff  00000000  00000000  00001ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000022e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_18>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	a8 01       	movw	r20, r16
  6a:	88 01       	movw	r16, r16
  6c:	8a 01       	movw	r16, r20
  6e:	8c 01       	movw	r16, r24
  70:	8e 01       	movw	r16, r28
  72:	90 01       	movw	r18, r0
  74:	92 01       	movw	r18, r4
  76:	94 01       	movw	r18, r8
  78:	96 01       	movw	r18, r12
  7a:	98 01       	movw	r18, r16
  7c:	9a 01       	movw	r18, r20
  7e:	9c 01       	movw	r18, r24
  80:	9e 01       	movw	r18, r28
  82:	a0 01       	movw	r20, r0
  84:	a2 01       	movw	r20, r4
  86:	a4 01       	movw	r20, r8

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	e6 e1       	ldi	r30, 0x16	; 22
  9c:	f4 e0       	ldi	r31, 0x04	; 4
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	aa 30       	cpi	r26, 0x0A	; 10
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	aa e0       	ldi	r26, 0x0A	; 10
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	a1 31       	cpi	r26, 0x11	; 17
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  be:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <configure_UART>:
		
    }
}

void configure_UART(void){
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); //enable RX TX pins
  c6:	e1 ec       	ldi	r30, 0xC1	; 193
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 69       	ori	r24, 0x98	; 152
  ce:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00); //set 8bit message with parity check and 1 stop bit
  d0:	e2 ec       	ldi	r30, 0xC2	; 194
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	86 60       	ori	r24, 0x06	; 6
  d8:	80 83       	st	Z, r24
	UBRR0=103; //set baud to 9600
  da:	87 e6       	ldi	r24, 0x67	; 103
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	08 95       	ret

000000e8 <EEPROM_write>:
	return;
}

void EEPROM_write(uint8_t uiAddress, uint8_t ucData){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE)){};
  e8:	f9 99       	sbic	0x1f, 1	; 31
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <EEPROM_write>
	/* Set up address and Data Registers */
	EEAR = uiAddress;
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	92 bd       	out	0x22, r25	; 34
  f0:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
  f2:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
  f4:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
  f6:	f9 9a       	sbi	0x1f, 1	; 31
	
	while(EECR & (1<<EEPE)){};
  f8:	f9 99       	sbic	0x1f, 1	; 31
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <EEPROM_write+0x10>
}
  fc:	08 95       	ret

000000fe <EEPROM_read>:

uint8_t EEPROM_read(uint8_t uiAddress){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE)){};
  fe:	f9 99       	sbic	0x1f, 1	; 31
 100:	fe cf       	rjmp	.-4      	; 0xfe <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	92 bd       	out	0x22, r25	; 34
 106:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 108:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
 10a:	80 b5       	in	r24, 0x20	; 32
}
 10c:	08 95       	ret

0000010e <write_serial>:

void write_serial(uint8_t word){
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	28 97       	sbiw	r28, 0x08	; 8
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	48 2f       	mov	r20, r24
	uint8_t it=0;
	int coef[4]={0,0,0,0};
 130:	fe 01       	movw	r30, r28
 132:	31 96       	adiw	r30, 0x01	; 1
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	df 01       	movw	r26, r30
 138:	1d 92       	st	X+, r1
 13a:	8a 95       	dec	r24
 13c:	e9 f7       	brne	.-6      	; 0x138 <write_serial+0x2a>
	
	for(it=0; it<3; it++){
		if(it==0){coef[0]=word/100;}
 13e:	e9 e2       	ldi	r30, 0x29	; 41
 140:	4e 9f       	mul	r20, r30
 142:	e1 2d       	mov	r30, r1
 144:	11 24       	eor	r1, r1
 146:	e2 95       	swap	r30
 148:	ef 70       	andi	r30, 0x0F	; 15
 14a:	09 81       	ldd	r16, Y+1	; 0x01
 14c:	1a 81       	ldd	r17, Y+2	; 0x02
 14e:	6b 81       	ldd	r22, Y+3	; 0x03
 150:	7c 81       	ldd	r23, Y+4	; 0x04
 152:	31 e0       	ldi	r19, 0x01	; 1
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	f0 e0       	ldi	r31, 0x00	; 0
		else if(it==1){coef[1]=(word-coef[0]*100)/10;}
 158:	c4 2e       	mov	r12, r20
 15a:	d1 2c       	mov	r13, r1
 15c:	0f 2e       	mov	r0, r31
 15e:	fa e0       	ldi	r31, 0x0A	; 10
 160:	ef 2e       	mov	r14, r31
 162:	f1 2c       	mov	r15, r1
 164:	f0 2d       	mov	r31, r0
 166:	02 c0       	rjmp	.+4      	; 0x16c <write_serial+0x5e>
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 5f       	subi	r19, 0xFF	; 255
void write_serial(uint8_t word){
	uint8_t it=0;
	int coef[4]={0,0,0,0};
	
	for(it=0; it<3; it++){
		if(it==0){coef[0]=word/100;}
 16c:	22 23       	and	r18, r18
 16e:	09 f4       	brne	.+2      	; 0x172 <write_serial+0x64>
 170:	6b c0       	rjmp	.+214    	; 0x248 <write_serial+0x13a>
		else if(it==1){coef[1]=(word-coef[0]*100)/10;}
 172:	21 30       	cpi	r18, 0x01	; 1
 174:	61 f4       	brne	.+24     	; 0x18e <write_serial+0x80>
 176:	5c e9       	ldi	r21, 0x9C	; 156
 178:	50 03       	mulsu	r21, r16
 17a:	c0 01       	movw	r24, r0
 17c:	51 9f       	mul	r21, r17
 17e:	90 0d       	add	r25, r0
 180:	11 24       	eor	r1, r1
 182:	8c 0d       	add	r24, r12
 184:	9d 1d       	adc	r25, r13
 186:	b7 01       	movw	r22, r14
 188:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__divmodhi4>
 18c:	ed cf       	rjmp	.-38     	; 0x168 <write_serial+0x5a>
		else if(it==2){coef[2]=word-(coef[0]*100)-(coef[1]*10);}
 18e:	22 30       	cpi	r18, 0x02	; 2
 190:	c1 f4       	brne	.+48     	; 0x1c2 <write_serial+0xb4>
 192:	1a 83       	std	Y+2, r17	; 0x02
 194:	09 83       	std	Y+1, r16	; 0x01
 196:	7c 83       	std	Y+4, r23	; 0x04
 198:	6b 83       	std	Y+3, r22	; 0x03
 19a:	2c e9       	ldi	r18, 0x9C	; 156
 19c:	20 03       	mulsu	r18, r16
 19e:	c0 01       	movw	r24, r0
 1a0:	21 9f       	mul	r18, r17
 1a2:	90 0d       	add	r25, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	9c 01       	movw	r18, r24
 1a8:	24 0f       	add	r18, r20
 1aa:	31 1d       	adc	r19, r1
 1ac:	46 ef       	ldi	r20, 0xF6	; 246
 1ae:	46 03       	mulsu	r20, r22
 1b0:	c0 01       	movw	r24, r0
 1b2:	47 9f       	mul	r20, r23
 1b4:	90 0d       	add	r25, r0
 1b6:	11 24       	eor	r1, r1
 1b8:	82 0f       	add	r24, r18
 1ba:	93 1f       	adc	r25, r19
 1bc:	9e 83       	std	Y+6, r25	; 0x06
 1be:	8d 83       	std	Y+5, r24	; 0x05
 1c0:	06 c0       	rjmp	.+12     	; 0x1ce <write_serial+0xc0>

void write_serial(uint8_t word){
	uint8_t it=0;
	int coef[4]={0,0,0,0};
	
	for(it=0; it<3; it++){
 1c2:	33 30       	cpi	r19, 0x03	; 3
 1c4:	88 f2       	brcs	.-94     	; 0x168 <write_serial+0x5a>
 1c6:	1a 83       	std	Y+2, r17	; 0x02
 1c8:	09 83       	std	Y+1, r16	; 0x01
 1ca:	7c 83       	std	Y+4, r23	; 0x04
 1cc:	6b 83       	std	Y+3, r22	; 0x03
 1ce:	fe 01       	movw	r30, r28
 1d0:	31 96       	adiw	r30, 0x01	; 1
		if(it==0){coef[0]=word/100;}
 1d2:	80 e0       	ldi	r24, 0x00	; 0
		else{}
	};
	
	for(it=0; it<4; it++){
		if(it<3){coef[it]+=48;}
		else{coef[it]=0x0A;}
 1d4:	4a e0       	ldi	r20, 0x0A	; 10
 1d6:	50 e0       	ldi	r21, 0x00	; 0
		else if(it==2){coef[2]=word-(coef[0]*100)-(coef[1]*10);}
		else{}
	};
	
	for(it=0; it<4; it++){
		if(it<3){coef[it]+=48;}
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	38 f4       	brcc	.+14     	; 0x1ea <write_serial+0xdc>
 1dc:	20 81       	ld	r18, Z
 1de:	31 81       	ldd	r19, Z+1	; 0x01
 1e0:	20 5d       	subi	r18, 0xD0	; 208
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	31 83       	std	Z+1, r19	; 0x01
 1e6:	20 83       	st	Z, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <write_serial+0xe0>
		else{coef[it]=0x0A;}
 1ea:	51 83       	std	Z+1, r21	; 0x01
 1ec:	40 83       	st	Z, r20
		else if(it==1){coef[1]=(word-coef[0]*100)/10;}
		else if(it==2){coef[2]=word-(coef[0]*100)-(coef[1]*10);}
		else{}
	};
	
	for(it=0; it<4; it++){
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	32 96       	adiw	r30, 0x02	; 2
 1f2:	84 30       	cpi	r24, 0x04	; 4
 1f4:	89 f7       	brne	.-30     	; 0x1d8 <write_serial+0xca>
 1f6:	be 01       	movw	r22, r28
 1f8:	61 51       	subi	r22, 0x11	; 17
 1fa:	71 09       	sbc	r23, r1
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	it=0;
	
	while(it<13){
		if((UCSR0A & 0x20)==0x20){
 200:	e0 ec       	ldi	r30, 0xC0	; 192
 202:	f0 e0       	ldi	r31, 0x00	; 0
			if(it<9){
				UDR0=word_adrs[it];
				it++;
			}
			else if(it>8 || it<13){
				UDR0=coef[it-9];
 204:	46 ec       	ldi	r20, 0xC6	; 198
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	1b c0       	rjmp	.+54     	; 0x240 <write_serial+0x132>
	}
	
	it=0;
	
	while(it<13){
		if((UCSR0A & 0x20)==0x20){
 20a:	80 81       	ld	r24, Z
 20c:	85 fd       	sbrc	r24, 5
 20e:	03 c0       	rjmp	.+6      	; 0x216 <write_serial+0x108>
		else{coef[it]=0x0A;}
	}
	
	it=0;
	
	while(it<13){
 210:	2d 30       	cpi	r18, 0x0D	; 13
 212:	d8 f3       	brcs	.-10     	; 0x20a <write_serial+0xfc>
 214:	1b c0       	rjmp	.+54     	; 0x24c <write_serial+0x13e>
		if((UCSR0A & 0x20)==0x20){
			if(it<9){
 216:	29 30       	cpi	r18, 0x09	; 9
 218:	40 f4       	brcc	.+16     	; 0x22a <write_serial+0x11c>
				UDR0=word_adrs[it];
 21a:	c9 01       	movw	r24, r18
 21c:	80 50       	subi	r24, 0x00	; 0
 21e:	9f 4f       	sbci	r25, 0xFF	; 255
 220:	dc 01       	movw	r26, r24
 222:	8c 91       	ld	r24, X
 224:	da 01       	movw	r26, r20
 226:	8c 93       	st	X, r24
 228:	04 c0       	rjmp	.+8      	; 0x232 <write_serial+0x124>
				it++;
			}
			else if(it>8 || it<13){
				UDR0=coef[it-9];
 22a:	db 01       	movw	r26, r22
 22c:	8c 91       	ld	r24, X
 22e:	da 01       	movw	r26, r20
 230:	8c 93       	st	X, r24
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	6e 5f       	subi	r22, 0xFE	; 254
 238:	7f 4f       	sbci	r23, 0xFF	; 255
		else{coef[it]=0x0A;}
	}
	
	it=0;
	
	while(it<13){
 23a:	2d 30       	cpi	r18, 0x0D	; 13
 23c:	31 05       	cpc	r19, r1
 23e:	31 f0       	breq	.+12     	; 0x24c <write_serial+0x13e>
		if((UCSR0A & 0x20)==0x20){
 240:	80 81       	ld	r24, Z
 242:	85 fd       	sbrc	r24, 5
 244:	e8 cf       	rjmp	.-48     	; 0x216 <write_serial+0x108>
 246:	e1 cf       	rjmp	.-62     	; 0x20a <write_serial+0xfc>
void write_serial(uint8_t word){
	uint8_t it=0;
	int coef[4]={0,0,0,0};
	
	for(it=0; it<3; it++){
		if(it==0){coef[0]=word/100;}
 248:	8f 01       	movw	r16, r30
 24a:	8e cf       	rjmp	.-228    	; 0x168 <write_serial+0x5a>
		else{}
	
	};

	return;
};
 24c:	28 96       	adiw	r28, 0x08	; 8
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	df 90       	pop	r13
 266:	cf 90       	pop	r12
 268:	08 95       	ret

0000026a <__vector_18>:

ISR(USART_RX_vect){
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
	word_vector[words]=UDR0;
 280:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 28a:	e5 5f       	subi	r30, 0xF5	; 245
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	80 83       	st	Z, r24
	words++;
 290:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	if(words==3){
 29a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	c9 f4       	brne	.+50     	; 0x2d4 <__vector_18+0x6a>
		to_write=(word_vector[0]-48)*100+(word_vector[1]-48)*10+(word_vector[2]-48);
 2a2:	eb e0       	ldi	r30, 0x0B	; 11
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	90 81       	ld	r25, Z
 2a8:	81 81       	ldd	r24, Z+1	; 0x01
 2aa:	22 81       	ldd	r18, Z+2	; 0x02
 2ac:	90 53       	subi	r25, 0x30	; 48
 2ae:	20 53       	subi	r18, 0x30	; 48
 2b0:	34 e6       	ldi	r19, 0x64	; 100
 2b2:	93 9f       	mul	r25, r19
 2b4:	20 0d       	add	r18, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	88 0f       	add	r24, r24
 2ba:	80 56       	subi	r24, 0x60	; 96
 2bc:	98 2f       	mov	r25, r24
 2be:	99 0f       	add	r25, r25
 2c0:	99 0f       	add	r25, r25
 2c2:	89 0f       	add	r24, r25
 2c4:	82 0f       	add	r24, r18
 2c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <to_write>
		flag_write=1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <flag_write>
		words=0;
 2d0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	}
	else{};
	
	return;
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <write_value>:

void write_value(uint8_t data){
	PORTD=data<<2;
 2ea:	98 2f       	mov	r25, r24
 2ec:	99 0f       	add	r25, r25
 2ee:	99 0f       	add	r25, r25
 2f0:	9b b9       	out	0x0b, r25	; 11
	PORTB=data>>6;
 2f2:	82 95       	swap	r24
 2f4:	86 95       	lsr	r24
 2f6:	86 95       	lsr	r24
 2f8:	83 70       	andi	r24, 0x03	; 3
 2fa:	85 b9       	out	0x05, r24	; 5
 2fc:	08 95       	ret

000002fe <sev_seg>:
}

uint8_t sev_seg(uint8_t data){
	switch(data){
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	80 31       	cpi	r24, 0x10	; 16
 302:	91 05       	cpc	r25, r1
 304:	18 f5       	brcc	.+70     	; 0x34c <sev_seg+0x4e>
 306:	fc 01       	movw	r30, r24
 308:	ec 5c       	subi	r30, 0xCC	; 204
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__tablejump2__>
		case 0x00:
			return 0b00111111;
		break;
		
		case 0x01:
			return 0b00000110;
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	08 95       	ret
		break;
		
		case 0x02:
			return 0b01011011;
 314:	8b e5       	ldi	r24, 0x5B	; 91
 316:	08 95       	ret
		break;
		
		case 0x03:
			return 0b01001111;
 318:	8f e4       	ldi	r24, 0x4F	; 79
 31a:	08 95       	ret
		break;
		
		case 0x04:
			return 0b01100110;
 31c:	86 e6       	ldi	r24, 0x66	; 102
 31e:	08 95       	ret
		break;
		
		case 0x05:
			return 0b01101101;
 320:	8d e6       	ldi	r24, 0x6D	; 109
 322:	08 95       	ret
		break;
		
		case 0x06:
			return 0b01111101;
 324:	8d e7       	ldi	r24, 0x7D	; 125
 326:	08 95       	ret
		break;
		
		case 0x07:
			return 0b00000111;
 328:	87 e0       	ldi	r24, 0x07	; 7
 32a:	08 95       	ret
		break;
		
		case 0x08:
			return 0b01111111;
 32c:	8f e7       	ldi	r24, 0x7F	; 127
 32e:	08 95       	ret
		break;
		
		case 0x09:
			return 0b01100111;
 330:	87 e6       	ldi	r24, 0x67	; 103
 332:	08 95       	ret
		break;
		
		case 0x0A:
			return 0b01110111;
 334:	87 e7       	ldi	r24, 0x77	; 119
 336:	08 95       	ret
		break;
		
		case 0x0B:
			return 0b01111100;
 338:	8c e7       	ldi	r24, 0x7C	; 124
 33a:	08 95       	ret
		break;
		
		case 0x0C:
			return 0b00111001;
 33c:	89 e3       	ldi	r24, 0x39	; 57
 33e:	08 95       	ret
		break;
		
		case 0x0D:
			return 0b01011110;
 340:	8e e5       	ldi	r24, 0x5E	; 94
 342:	08 95       	ret
		break;
		
		case 0x0E:
			return 0b01111001;
 344:	89 e7       	ldi	r24, 0x79	; 121
 346:	08 95       	ret
		break;
		
		case 0x0F:
			return 0b01110001;
 348:	81 e7       	ldi	r24, 0x71	; 113
 34a:	08 95       	ret
		break;
		
		default:
			return 0x00;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret
}

uint8_t sev_seg(uint8_t data){
	switch(data){
		case 0x00:
			return 0b00111111;
 350:	8f e3       	ldi	r24, 0x3F	; 63
		
		default:
			return 0x00;
		break;
	};
 352:	08 95       	ret

00000354 <main>:
volatile uint8_t actual_address=0, to_write=0, flag_write=0, word_vector[3]={0,0,0}, words=0;
volatile char word_adrs[9]={'A','d','d','r','e','s','s',':',' '};

int main(void)
{
	DDRD=0b11111110; //set portd to write in '1' pins and receive in '0' pins
 354:	8e ef       	ldi	r24, 0xFE	; 254
 356:	8a b9       	out	0x0a, r24	; 10
	DDRB=0b00000001; //set portb to write in '1' pins and receive in '0' pins
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	84 b9       	out	0x04, r24	; 4
	DDRC=0b00000000; //set portc to read in all pins
 35c:	17 b8       	out	0x07, r1	; 7
	UCSR0B|=(1<<RXCIE0); //enable RX interruption
 35e:	e1 ec       	ldi	r30, 0xC1	; 193
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	80 68       	ori	r24, 0x80	; 128
 366:	80 83       	st	Z, r24
	
	uint8_t valor=0, address_toread=0, output=0;
	
	configure_UART();
 368:	0e 94 63 00 	call	0xc6	; 0xc6 <configure_UART>
	sei();
 36c:	78 94       	sei
	
	write_serial(actual_address);
 36e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <actual_address>
 372:	0e 94 87 00 	call	0x10e	; 0x10e <write_serial>
	
    while (1) 
    {
		if(flag_write==1){
 376:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <flag_write>
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	99 f4       	brne	.+38     	; 0x3a4 <main+0x50>
			cli();
 37e:	f8 94       	cli
			EEPROM_write(actual_address, to_write);
 380:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <to_write>
 384:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <actual_address>
 388:	0e 94 74 00 	call	0xe8	; 0xe8 <EEPROM_write>
			flag_write=0;
 38c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <flag_write>
			actual_address++;
 390:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <actual_address>
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <actual_address>
			write_serial(actual_address);
 39a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <actual_address>
 39e:	0e 94 87 00 	call	0x10e	; 0x10e <write_serial>
			sei();
 3a2:	78 94       	sei
		}
		
		address_toread=0x0F & PINC;
 3a4:	86 b1       	in	r24, 0x06	; 6
		
		valor=EEPROM_read(address_toread);
 3a6:	8f 70       	andi	r24, 0x0F	; 15
 3a8:	0e 94 7f 00 	call	0xfe	; 0xfe <EEPROM_read>
		
		output=sev_seg(valor);
 3ac:	0e 94 7f 01 	call	0x2fe	; 0x2fe <sev_seg>
		
		write_value(output);
 3b0:	0e 94 75 01 	call	0x2ea	; 0x2ea <write_value>
		
    }
 3b4:	e0 cf       	rjmp	.-64     	; 0x376 <main+0x22>

000003b6 <__divmodhi4>:
 3b6:	97 fb       	bst	r25, 7
 3b8:	07 2e       	mov	r0, r23
 3ba:	16 f4       	brtc	.+4      	; 0x3c0 <__divmodhi4+0xa>
 3bc:	00 94       	com	r0
 3be:	07 d0       	rcall	.+14     	; 0x3ce <__divmodhi4_neg1>
 3c0:	77 fd       	sbrc	r23, 7
 3c2:	09 d0       	rcall	.+18     	; 0x3d6 <__divmodhi4_neg2>
 3c4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__udivmodhi4>
 3c8:	07 fc       	sbrc	r0, 7
 3ca:	05 d0       	rcall	.+10     	; 0x3d6 <__divmodhi4_neg2>
 3cc:	3e f4       	brtc	.+14     	; 0x3dc <__divmodhi4_exit>

000003ce <__divmodhi4_neg1>:
 3ce:	90 95       	com	r25
 3d0:	81 95       	neg	r24
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
 3d4:	08 95       	ret

000003d6 <__divmodhi4_neg2>:
 3d6:	70 95       	com	r23
 3d8:	61 95       	neg	r22
 3da:	7f 4f       	sbci	r23, 0xFF	; 255

000003dc <__divmodhi4_exit>:
 3dc:	08 95       	ret

000003de <__tablejump2__>:
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	05 90       	lpm	r0, Z+
 3e4:	f4 91       	lpm	r31, Z
 3e6:	e0 2d       	mov	r30, r0
 3e8:	09 94       	ijmp

000003ea <__udivmodhi4>:
 3ea:	aa 1b       	sub	r26, r26
 3ec:	bb 1b       	sub	r27, r27
 3ee:	51 e1       	ldi	r21, 0x11	; 17
 3f0:	07 c0       	rjmp	.+14     	; 0x400 <__udivmodhi4_ep>

000003f2 <__udivmodhi4_loop>:
 3f2:	aa 1f       	adc	r26, r26
 3f4:	bb 1f       	adc	r27, r27
 3f6:	a6 17       	cp	r26, r22
 3f8:	b7 07       	cpc	r27, r23
 3fa:	10 f0       	brcs	.+4      	; 0x400 <__udivmodhi4_ep>
 3fc:	a6 1b       	sub	r26, r22
 3fe:	b7 0b       	sbc	r27, r23

00000400 <__udivmodhi4_ep>:
 400:	88 1f       	adc	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	5a 95       	dec	r21
 406:	a9 f7       	brne	.-22     	; 0x3f2 <__udivmodhi4_loop>
 408:	80 95       	com	r24
 40a:	90 95       	com	r25
 40c:	bc 01       	movw	r22, r24
 40e:	cd 01       	movw	r24, r26
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
