
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007da  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000353  00000000  00000000  000010f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027d  00000000  00000000  0000187e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001afb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	9f 00       	.word	0x009f	; ????
  6a:	7f 00       	.word	0x007f	; ????
  6c:	81 00       	.word	0x0081	; ????
  6e:	83 00       	.word	0x0083	; ????
  70:	85 00       	.word	0x0085	; ????
  72:	87 00       	.word	0x0087	; ????
  74:	89 00       	.word	0x0089	; ????
  76:	8b 00       	.word	0x008b	; ????
  78:	8d 00       	.word	0x008d	; ????
  7a:	8f 00       	.word	0x008f	; ????
  7c:	91 00       	.word	0x0091	; ????
  7e:	93 00       	.word	0x0093	; ????
  80:	95 00       	.word	0x0095	; ????
  82:	97 00       	.word	0x0097	; ????
  84:	99 00       	.word	0x0099	; ????
  86:	9b 00       	.word	0x009b	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61
  94:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  98:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adc_init>:
	};
   
}

void adc_init(void){
	ADMUX|=(1<<REFS0);
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //enabling ADC and setting prescaler to 1/128
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	87 68       	ori	r24, 0x87	; 135
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <read_adc>:

uint8_t read_adc(void){
	uint16_t adc_read;
	uint8_t adc_out;
	
	ADCSRA|=(1<<ADSC);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24

	while((0x10&ADCSRA)!=0x10){};
  c0:	80 81       	ld	r24, Z
  c2:	84 ff       	sbrs	r24, 4
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <read_adc+0xa>
	
	adc_read=ADCW;
  c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	adc_out=adc_read>>2;
	
	return adc_out;
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	96 95       	lsr	r25
  d4:	87 95       	ror	r24
}
  d6:	08 95       	ret

000000d8 <write_value>:

void write_value(uint8_t data){
	PORTD=data<<2;
  d8:	98 2f       	mov	r25, r24
  da:	99 0f       	add	r25, r25
  dc:	99 0f       	add	r25, r25
  de:	9b b9       	out	0x0b, r25	; 11
	PORTB=data>>6;
  e0:	82 95       	swap	r24
  e2:	86 95       	lsr	r24
  e4:	86 95       	lsr	r24
  e6:	83 70       	andi	r24, 0x03	; 3
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	08 95       	ret

000000ec <sev_seg>:
}

uint8_t sev_seg(uint8_t data){
	switch(data){
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	80 31       	cpi	r24, 0x10	; 16
  f0:	91 05       	cpc	r25, r1
  f2:	18 f5       	brcc	.+70     	; 0x13a <sev_seg+0x4e>
  f4:	fc 01       	movw	r30, r24
  f6:	ec 5c       	subi	r30, 0xCC	; 204
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	0c 94 c1 00 	jmp	0x182	; 0x182 <__tablejump2__>
		case 0x00:
		return 0b00111111;
		break;
		
		case 0x01:
		return 0b00000110;
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	08 95       	ret
		break;
		
		case 0x02:
		return 0b01011011;
 102:	8b e5       	ldi	r24, 0x5B	; 91
 104:	08 95       	ret
		break;
		
		case 0x03:
		return 0b01001111;
 106:	8f e4       	ldi	r24, 0x4F	; 79
 108:	08 95       	ret
		break;
		
		case 0x04:
		return 0b01100110;
 10a:	86 e6       	ldi	r24, 0x66	; 102
 10c:	08 95       	ret
		break;
		
		case 0x05:
		return 0b01101101;
 10e:	8d e6       	ldi	r24, 0x6D	; 109
 110:	08 95       	ret
		break;
		
		case 0x06:
		return 0b01111101;
 112:	8d e7       	ldi	r24, 0x7D	; 125
 114:	08 95       	ret
		break;
		
		case 0x07:
		return 0b00000111;
 116:	87 e0       	ldi	r24, 0x07	; 7
 118:	08 95       	ret
		break;
		
		case 0x08:
		return 0b01111111;
 11a:	8f e7       	ldi	r24, 0x7F	; 127
 11c:	08 95       	ret
		break;
		
		case 0x09:
		return 0b01100111;
 11e:	87 e6       	ldi	r24, 0x67	; 103
 120:	08 95       	ret
		break;
		
		case 0x0A:
		return 0b01110111;
 122:	87 e7       	ldi	r24, 0x77	; 119
 124:	08 95       	ret
		break;
		
		case 0x0B:
		return 0b01111100;
 126:	8c e7       	ldi	r24, 0x7C	; 124
 128:	08 95       	ret
		break;
		
		case 0x0C:
		return 0b00111001;
 12a:	89 e3       	ldi	r24, 0x39	; 57
 12c:	08 95       	ret
		break;
		
		case 0x0D:
		return 0b01011110;
 12e:	8e e5       	ldi	r24, 0x5E	; 94
 130:	08 95       	ret
		break;
		
		case 0x0E:
		return 0b01111001;
 132:	89 e7       	ldi	r24, 0x79	; 121
 134:	08 95       	ret
		break;
		
		case 0x0F:
		return 0b01110001;
 136:	81 e7       	ldi	r24, 0x71	; 113
 138:	08 95       	ret
		break;
		
		default:
		return 0x00;
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
}

uint8_t sev_seg(uint8_t data){
	switch(data){
		case 0x00:
		return 0b00111111;
 13e:	8f e3       	ldi	r24, 0x3F	; 63
		
		default:
		return 0x00;
		break;
	};
};
 140:	08 95       	ret

00000142 <SPI_MasterInit>:

void SPI_MasterInit(void){
	/* Set MOSI and SCK output*/
	DDRB |= (1<<PB3)|(1<<PB5);
 142:	84 b1       	in	r24, 0x04	; 4
 144:	88 62       	ori	r24, 0x28	; 40
 146:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 148:	8c b5       	in	r24, 0x2c	; 44
 14a:	81 65       	ori	r24, 0x51	; 81
 14c:	8c bd       	out	0x2c, r24	; 44
 14e:	08 95       	ret

00000150 <SPI_MasterTransmit>:
	
	return;
}

uint8_t SPI_MasterTransmit(uint8_t cData){
	PORTB&=~(1<<PB2);
 150:	2a 98       	cbi	0x05, 2	; 5
	/* Start transmission */
	SPDR = cData;
 152:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF))){};
 154:	0d b4       	in	r0, 0x2d	; 45
 156:	07 fe       	sbrs	r0, 7
 158:	fd cf       	rjmp	.-6      	; 0x154 <SPI_MasterTransmit+0x4>
	
	PORTB|=(1<<PB2);
 15a:	2a 9a       	sbi	0x05, 2	; 5
	
	return SPDR;
 15c:	8e b5       	in	r24, 0x2e	; 46
}
 15e:	08 95       	ret

00000160 <main>:

int main(void)
{
	uint8_t adc_read=0, to_display=0, in_SPI=0;
	
	DDRD=0b11111100;
 160:	8c ef       	ldi	r24, 0xFC	; 252
 162:	8a b9       	out	0x0a, r24	; 10
	DDRB=0b00000101;
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	84 b9       	out	0x04, r24	; 4
	
	adc_init();
 168:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_init>
	SPI_MasterInit();
 16c:	0e 94 a1 00 	call	0x142	; 0x142 <SPI_MasterInit>
	
	while(1){

		adc_read=read_adc();
 170:	0e 94 5b 00 	call	0xb6	; 0xb6 <read_adc>
		
		in_SPI=SPI_MasterTransmit(adc_read);
 174:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_MasterTransmit>
				
		to_display=sev_seg(in_SPI);
 178:	0e 94 76 00 	call	0xec	; 0xec <sev_seg>
		
		write_value(to_display);
 17c:	0e 94 6c 00 	call	0xd8	; 0xd8 <write_value>
 180:	f7 cf       	rjmp	.-18     	; 0x170 <main+0x10>

00000182 <__tablejump2__>:
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	05 90       	lpm	r0, Z+
 188:	f4 91       	lpm	r31, Z
 18a:	e0 2d       	mov	r30, r0
 18c:	09 94       	ijmp

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
