
Atividade 15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086d  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b7  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043a  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ee  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002102  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  88:	0c 94 04 02 	jmp	0x408	; 0x408 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <start_PWM>:
		
	return 0;
};

void start_PWM(void){
	TCCR2A|=(1<<COM2A1)|(1<<WGM21)|(1<<WGM20); // setando modo fast pwm e determinando saida COM1A0
  90:	e0 eb       	ldi	r30, 0xB0	; 176
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 68       	ori	r24, 0x83	; 131
  98:	80 83       	st	Z, r24
	TCCR2B|=(1<<CS22); //set mode for fast PWM top 0xFF and prescaling of 1/64
  9a:	e1 eb       	ldi	r30, 0xB1	; 177
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <start_timer1>:
	return;
}

void start_timer1(void){
	TCCR1B|=(1<<WGM12)|(1<<CS12); //set mode to CTC and presclaing 1/256
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 60       	ori	r24, 0x0C	; 12
  ae:	80 83       	st	Z, r24
	TIMSK1|=(1<<OCIE1A); //enable interruption when equal
  b0:	ef e6       	ldi	r30, 0x6F	; 111
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
	OCR1A=0x7A11; //set value for a time delay 0.5s
  ba:	81 e1       	ldi	r24, 0x11	; 17
  bc:	9a e7       	ldi	r25, 0x7A	; 122
  be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  c6:	08 95       	ret

000000c8 <stop_timer1>:
	return;
}

void stop_timer1(void){ //disable timer 01
	TCCR1B&=~((1<<WGM12)|(1<<CS12)); 
  c8:	e1 e8       	ldi	r30, 0x81	; 129
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	83 7f       	andi	r24, 0xF3	; 243
  d0:	80 83       	st	Z, r24
	TIMSK1&=~((1<<OCIE1A));
  d2:	ef e6       	ldi	r30, 0x6F	; 111
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <adc_init>:
	return;
}

void adc_init(void){
	ADMUX|=(1<<REFS0);
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //enabling ADC and setting prescaler to 1/128
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	87 68       	ori	r24, 0x87	; 135
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <adc_stop>:
	return;
}

void adc_stop(void){
	ADMUX&=~(1<<REFS0);
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8f 7b       	andi	r24, 0xBF	; 191
  fc:	80 83       	st	Z, r24
	ADCSRA&=~((1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)); //enabling ADC and setting prescaler to 1/128
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 77       	andi	r24, 0x78	; 120
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <read_adc>:
}

uint8_t read_adc(void){

	ADCSRA|=(1<<ADSC); //initialize convertion
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24

	while((0x10&ADCSRA)!=0x10){}; //wait until complete
 114:	80 81       	ld	r24, Z
 116:	84 ff       	sbrs	r24, 4
 118:	fd cf       	rjmp	.-6      	; 0x114 <read_adc+0xa>
	
	return (ADCW>>2); //reduce to 8bit size
 11a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 11e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
}
 12a:	08 95       	ret

0000012c <configure_UART>:

void configure_UART(void){
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); //enable RX TX pins
 12c:	e1 ec       	ldi	r30, 0xC1	; 193
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	88 69       	ori	r24, 0x98	; 152
 134:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00); //set 8bit message with parity check and 1 stop bit
 136:	e2 ec       	ldi	r30, 0xC2	; 194
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	86 60       	ori	r24, 0x06	; 6
 13e:	80 83       	st	Z, r24
	UBRR0=103; //set baud to 9600
 140:	87 e6       	ldi	r24, 0x67	; 103
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 148:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 14c:	08 95       	ret

0000014e <main>:
uint8_t read_adc(void);

volatile uint8_t ADC_value=0x00, words=0, word_vector[3]={0,0,0};

int main(void){
	DDRB=0x08;//0b00001000
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	84 b9       	out	0x04, r24	; 4
	DDRC=0x00;//0b00001000
 152:	17 b8       	out	0x07, r1	; 7
	DDRD=0x02;//0x00000010
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	8a b9       	out	0x0a, r24	; 10

	start_PWM(); //configure PWM output
 158:	0e 94 48 00 	call	0x90	; 0x90 <start_PWM>
	OCR2A=0; //initialize PWM
 15c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	configure_UART(); //configure UART device
 160:	0e 94 96 00 	call	0x12c	; 0x12c <configure_UART>
	sei(); //enable interruption
 164:	78 94       	sei
			start_timer1(); //init timer 01
			adc_init(); //init ADC
			ADC_value=read_adc(); //read adc value
		}
		else{
			UCSR0B|=(1<<RXCIE0); //enable RX complete interruption
 166:	c1 ec       	ldi	r28, 0xC1	; 193
 168:	d0 e0       	ldi	r29, 0x00	; 0
	OCR2A=0; //initialize PWM
	configure_UART(); //configure UART device
	sei(); //enable interruption
	
	while(1){
		if(PINC & (1<<PINC3)){
 16a:	33 9b       	sbis	0x06, 3	; 6
 16c:	0c c0       	rjmp	.+24     	; 0x186 <main+0x38>
			UCSR0B&=~(1<<RXCIE0); //disable RX complete interruption
 16e:	88 81       	ld	r24, Y
 170:	8f 77       	andi	r24, 0x7F	; 127
 172:	88 83       	st	Y, r24
			start_timer1(); //init timer 01
 174:	0e 94 53 00 	call	0xa6	; 0xa6 <start_timer1>
			adc_init(); //init ADC
 178:	0e 94 6f 00 	call	0xde	; 0xde <adc_init>
			ADC_value=read_adc(); //read adc value
 17c:	0e 94 85 00 	call	0x10a	; 0x10a <read_adc>
 180:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADC_value>
 184:	f2 cf       	rjmp	.-28     	; 0x16a <main+0x1c>
		}
		else{
			UCSR0B|=(1<<RXCIE0); //enable RX complete interruption
 186:	88 81       	ld	r24, Y
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	88 83       	st	Y, r24
			stop_timer1(); //stop timer 01
 18c:	0e 94 64 00 	call	0xc8	; 0xc8 <stop_timer1>
			adc_stop(); //stop ad converter
 190:	0e 94 7a 00 	call	0xf4	; 0xf4 <adc_stop>
 194:	ea cf       	rjmp	.-44     	; 0x16a <main+0x1c>

00000196 <write_serial>:
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00); //set 8bit message with parity check and 1 stop bit
	UBRR0=103; //set baud to 9600
	return;
}

void write_serial(uint8_t word){
 196:	cf 92       	push	r12
 198:	df 92       	push	r13
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	28 97       	sbiw	r28, 0x08	; 8
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	48 2f       	mov	r20, r24
	/*This function reads a 8bit word and converts it to a 3 byte ASCII word to print the inserted number*/
	uint8_t it=0;
	int coef[4]={0,0,0,0};
 1b8:	fe 01       	movw	r30, r28
 1ba:	31 96       	adiw	r30, 0x01	; 1
 1bc:	88 e0       	ldi	r24, 0x08	; 8
 1be:	df 01       	movw	r26, r30
 1c0:	1d 92       	st	X+, r1
 1c2:	8a 95       	dec	r24
 1c4:	e9 f7       	brne	.-6      	; 0x1c0 <write_serial+0x2a>
		
	for(it=0; it<3; it++){
		if(it==0){coef[0]=word/100;}
 1c6:	e9 e2       	ldi	r30, 0x29	; 41
 1c8:	4e 9f       	mul	r20, r30
 1ca:	e1 2d       	mov	r30, r1
 1cc:	11 24       	eor	r1, r1
 1ce:	e2 95       	swap	r30
 1d0:	ef 70       	andi	r30, 0x0F	; 15
 1d2:	09 81       	ldd	r16, Y+1	; 0x01
 1d4:	1a 81       	ldd	r17, Y+2	; 0x02
 1d6:	6b 81       	ldd	r22, Y+3	; 0x03
 1d8:	7c 81       	ldd	r23, Y+4	; 0x04
 1da:	31 e0       	ldi	r19, 0x01	; 1
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	f0 e0       	ldi	r31, 0x00	; 0
		else if(it==1){coef[1]=(word-coef[0]*100)/10;}
 1e0:	c4 2e       	mov	r12, r20
 1e2:	d1 2c       	mov	r13, r1
 1e4:	0f 2e       	mov	r0, r31
 1e6:	fa e0       	ldi	r31, 0x0A	; 10
 1e8:	ef 2e       	mov	r14, r31
 1ea:	f1 2c       	mov	r15, r1
 1ec:	f0 2d       	mov	r31, r0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <write_serial+0x5e>
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	3f 5f       	subi	r19, 0xFF	; 255
	/*This function reads a 8bit word and converts it to a 3 byte ASCII word to print the inserted number*/
	uint8_t it=0;
	int coef[4]={0,0,0,0};
		
	for(it=0; it<3; it++){
		if(it==0){coef[0]=word/100;}
 1f4:	22 23       	and	r18, r18
 1f6:	09 f4       	brne	.+2      	; 0x1fa <write_serial+0x64>
 1f8:	5d c0       	rjmp	.+186    	; 0x2b4 <write_serial+0x11e>
		else if(it==1){coef[1]=(word-coef[0]*100)/10;}
 1fa:	21 30       	cpi	r18, 0x01	; 1
 1fc:	61 f4       	brne	.+24     	; 0x216 <write_serial+0x80>
 1fe:	5c e9       	ldi	r21, 0x9C	; 156
 200:	50 03       	mulsu	r21, r16
 202:	c0 01       	movw	r24, r0
 204:	51 9f       	mul	r21, r17
 206:	90 0d       	add	r25, r0
 208:	11 24       	eor	r1, r1
 20a:	8c 0d       	add	r24, r12
 20c:	9d 1d       	adc	r25, r13
 20e:	b7 01       	movw	r22, r14
 210:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__divmodhi4>
 214:	ed cf       	rjmp	.-38     	; 0x1f0 <write_serial+0x5a>
		else if(it==2){coef[2]=word-(coef[0]*100)-(coef[1]*10);}
 216:	22 30       	cpi	r18, 0x02	; 2
 218:	c1 f4       	brne	.+48     	; 0x24a <write_serial+0xb4>
 21a:	1a 83       	std	Y+2, r17	; 0x02
 21c:	09 83       	std	Y+1, r16	; 0x01
 21e:	7c 83       	std	Y+4, r23	; 0x04
 220:	6b 83       	std	Y+3, r22	; 0x03
 222:	2c e9       	ldi	r18, 0x9C	; 156
 224:	20 03       	mulsu	r18, r16
 226:	c0 01       	movw	r24, r0
 228:	21 9f       	mul	r18, r17
 22a:	90 0d       	add	r25, r0
 22c:	11 24       	eor	r1, r1
 22e:	9c 01       	movw	r18, r24
 230:	24 0f       	add	r18, r20
 232:	31 1d       	adc	r19, r1
 234:	46 ef       	ldi	r20, 0xF6	; 246
 236:	46 03       	mulsu	r20, r22
 238:	c0 01       	movw	r24, r0
 23a:	47 9f       	mul	r20, r23
 23c:	90 0d       	add	r25, r0
 23e:	11 24       	eor	r1, r1
 240:	82 0f       	add	r24, r18
 242:	93 1f       	adc	r25, r19
 244:	9e 83       	std	Y+6, r25	; 0x06
 246:	8d 83       	std	Y+5, r24	; 0x05
 248:	06 c0       	rjmp	.+12     	; 0x256 <write_serial+0xc0>
void write_serial(uint8_t word){
	/*This function reads a 8bit word and converts it to a 3 byte ASCII word to print the inserted number*/
	uint8_t it=0;
	int coef[4]={0,0,0,0};
		
	for(it=0; it<3; it++){
 24a:	33 30       	cpi	r19, 0x03	; 3
 24c:	88 f2       	brcs	.-94     	; 0x1f0 <write_serial+0x5a>
 24e:	1a 83       	std	Y+2, r17	; 0x02
 250:	09 83       	std	Y+1, r16	; 0x01
 252:	7c 83       	std	Y+4, r23	; 0x04
 254:	6b 83       	std	Y+3, r22	; 0x03
 256:	be 01       	movw	r22, r28
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
		if(it==0){coef[0]=word/100;}
 25c:	fb 01       	movw	r30, r22
 25e:	80 e0       	ldi	r24, 0x00	; 0
		else{}
	};
	
	for(it=0; it<4; it++){
		if(it<3){coef[it]+=48;}
		else{coef[it]=0x0A;}
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	50 e0       	ldi	r21, 0x00	; 0
		else if(it==2){coef[2]=word-(coef[0]*100)-(coef[1]*10);}
		else{}
	};
	
	for(it=0; it<4; it++){
		if(it<3){coef[it]+=48;}
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	38 f4       	brcc	.+14     	; 0x276 <write_serial+0xe0>
 268:	20 81       	ld	r18, Z
 26a:	31 81       	ldd	r19, Z+1	; 0x01
 26c:	20 5d       	subi	r18, 0xD0	; 208
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	31 83       	std	Z+1, r19	; 0x01
 272:	20 83       	st	Z, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <write_serial+0xe4>
		else{coef[it]=0x0A;}
 276:	51 83       	std	Z+1, r21	; 0x01
 278:	40 83       	st	Z, r20
		else if(it==1){coef[1]=(word-coef[0]*100)/10;}
		else if(it==2){coef[2]=word-(coef[0]*100)-(coef[1]*10);}
		else{}
	};
	
	for(it=0; it<4; it++){
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	32 96       	adiw	r30, 0x02	; 2
 27e:	84 30       	cpi	r24, 0x04	; 4
 280:	89 f7       	brne	.-30     	; 0x264 <write_serial+0xce>
 282:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	it=0;
	
	while(it<4){
		if((UCSR0A & 0x20)==0x20){
 284:	e0 ec       	ldi	r30, 0xC0	; 192
 286:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0=coef[it];
 288:	26 ec       	ldi	r18, 0xC6	; 198
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	0f c0       	rjmp	.+30     	; 0x2ac <write_serial+0x116>
	}
	
	it=0;
	
	while(it<4){
		if((UCSR0A & 0x20)==0x20){
 28e:	80 81       	ld	r24, Z
 290:	85 fd       	sbrc	r24, 5
 292:	03 c0       	rjmp	.+6      	; 0x29a <write_serial+0x104>
		else{coef[it]=0x0A;}
	}
	
	it=0;
	
	while(it<4){
 294:	94 30       	cpi	r25, 0x04	; 4
 296:	d8 f3       	brcs	.-10     	; 0x28e <write_serial+0xf8>
 298:	0f c0       	rjmp	.+30     	; 0x2b8 <write_serial+0x122>
		if((UCSR0A & 0x20)==0x20){
			UDR0=coef[it];
 29a:	db 01       	movw	r26, r22
 29c:	8c 91       	ld	r24, X
 29e:	6e 5f       	subi	r22, 0xFE	; 254
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	d9 01       	movw	r26, r18
 2a4:	8c 93       	st	X, r24
			it++;
 2a6:	9f 5f       	subi	r25, 0xFF	; 255
		else{coef[it]=0x0A;}
	}
	
	it=0;
	
	while(it<4){
 2a8:	94 30       	cpi	r25, 0x04	; 4
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <write_serial+0x122>
		if((UCSR0A & 0x20)==0x20){
 2ac:	80 81       	ld	r24, Z
 2ae:	85 fd       	sbrc	r24, 5
 2b0:	f4 cf       	rjmp	.-24     	; 0x29a <write_serial+0x104>
 2b2:	ed cf       	rjmp	.-38     	; 0x28e <write_serial+0xf8>
	/*This function reads a 8bit word and converts it to a 3 byte ASCII word to print the inserted number*/
	uint8_t it=0;
	int coef[4]={0,0,0,0};
		
	for(it=0; it<3; it++){
		if(it==0){coef[0]=word/100;}
 2b4:	8f 01       	movw	r16, r30
 2b6:	9c cf       	rjmp	.-200    	; 0x1f0 <write_serial+0x5a>
		}
		else{}
	};
	
	return;
};
 2b8:	28 96       	adiw	r28, 0x08	; 8
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	08 95       	ret

000002d6 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	5f 93       	push	r21
 2e8:	6f 93       	push	r22
 2ea:	7f 93       	push	r23
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
	write_serial(ADC_value); //write to serial port
 2f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADC_value>
 2fc:	0e 94 cb 00 	call	0x196	; 0x196 <write_serial>
	return;
};
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <__vector_18>:

ISR(USART_RX_vect){
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
	uint8_t PWM_duty=0;
	
	word_vector[words]=UDR0;
 344:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <words>
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 34e:	e0 50       	subi	r30, 0x00	; 0
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	80 83       	st	Z, r24
	words++;
 354:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <words>
 358:	8f 5f       	subi	r24, 0xFF	; 255
 35a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <words>
	
	if(words==3){
 35e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <words>
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	c1 f4       	brne	.+48     	; 0x396 <__vector_18+0x74>
		PWM_duty=(word_vector[0]-48)*100+(word_vector[1]-48)*10+(word_vector[2]-48); //calculates the new duty size for the PWM
 366:	e0 e0       	ldi	r30, 0x00	; 0
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	90 81       	ld	r25, Z
 36c:	81 81       	ldd	r24, Z+1	; 0x01
 36e:	22 81       	ldd	r18, Z+2	; 0x02
 370:	90 53       	subi	r25, 0x30	; 48
 372:	20 53       	subi	r18, 0x30	; 48
 374:	34 e6       	ldi	r19, 0x64	; 100
 376:	93 9f       	mul	r25, r19
 378:	20 0d       	add	r18, r0
 37a:	11 24       	eor	r1, r1
 37c:	88 0f       	add	r24, r24
 37e:	80 56       	subi	r24, 0x60	; 96
 380:	98 2f       	mov	r25, r24
 382:	99 0f       	add	r25, r25
 384:	99 0f       	add	r25, r25
 386:	89 0f       	add	r24, r25
 388:	82 0f       	add	r24, r18
		OCR2A=PWM_duty;//sets the new duty
 38a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		words=0; //the the word counter to zero
 38e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <words>
		write_serial(PWM_duty); //writes the value that was written
 392:	0e 94 cb 00 	call	0x196	; 0x196 <write_serial>
	}
	return;
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__divmodhi4>:
 3b8:	97 fb       	bst	r25, 7
 3ba:	07 2e       	mov	r0, r23
 3bc:	16 f4       	brtc	.+4      	; 0x3c2 <__divmodhi4+0xa>
 3be:	00 94       	com	r0
 3c0:	07 d0       	rcall	.+14     	; 0x3d0 <__divmodhi4_neg1>
 3c2:	77 fd       	sbrc	r23, 7
 3c4:	09 d0       	rcall	.+18     	; 0x3d8 <__divmodhi4_neg2>
 3c6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__udivmodhi4>
 3ca:	07 fc       	sbrc	r0, 7
 3cc:	05 d0       	rcall	.+10     	; 0x3d8 <__divmodhi4_neg2>
 3ce:	3e f4       	brtc	.+14     	; 0x3de <__divmodhi4_exit>

000003d0 <__divmodhi4_neg1>:
 3d0:	90 95       	com	r25
 3d2:	81 95       	neg	r24
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	08 95       	ret

000003d8 <__divmodhi4_neg2>:
 3d8:	70 95       	com	r23
 3da:	61 95       	neg	r22
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255

000003de <__divmodhi4_exit>:
 3de:	08 95       	ret

000003e0 <__udivmodhi4>:
 3e0:	aa 1b       	sub	r26, r26
 3e2:	bb 1b       	sub	r27, r27
 3e4:	51 e1       	ldi	r21, 0x11	; 17
 3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <__udivmodhi4_ep>

000003e8 <__udivmodhi4_loop>:
 3e8:	aa 1f       	adc	r26, r26
 3ea:	bb 1f       	adc	r27, r27
 3ec:	a6 17       	cp	r26, r22
 3ee:	b7 07       	cpc	r27, r23
 3f0:	10 f0       	brcs	.+4      	; 0x3f6 <__udivmodhi4_ep>
 3f2:	a6 1b       	sub	r26, r22
 3f4:	b7 0b       	sbc	r27, r23

000003f6 <__udivmodhi4_ep>:
 3f6:	88 1f       	adc	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	5a 95       	dec	r21
 3fc:	a9 f7       	brne	.-22     	; 0x3e8 <__udivmodhi4_loop>
 3fe:	80 95       	com	r24
 400:	90 95       	com	r25
 402:	bc 01       	movw	r22, r24
 404:	cd 01       	movw	r24, r26
 406:	08 95       	ret

00000408 <_exit>:
 408:	f8 94       	cli

0000040a <__stop_program>:
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__stop_program>
