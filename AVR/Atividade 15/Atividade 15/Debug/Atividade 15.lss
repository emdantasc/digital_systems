
Atividade 15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000715  00000000  00000000  00000a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c0  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000443  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 77 00 	call	0xee	; 0xee <main>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <start_PWM>:
	ADCSRA|=(1<<ADSC);

	while((0x10&ADCSRA)!=0x10){};
	
	return (ADCW>>2);
}
  90:	e0 eb       	ldi	r30, 0xB0	; 176
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 68       	ori	r24, 0x83	; 131
  98:	80 83       	st	Z, r24
  9a:	e1 eb       	ldi	r30, 0xB1	; 177
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <set_PWM>:
  a6:	f8 94       	cli
  a8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  ac:	78 94       	sei
  ae:	08 95       	ret

000000b0 <configure_UART>:

void configure_UART(void){
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0); //enable RX TX pins
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00); //set 8bit message with parity check and 1 stop bit
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	86 60       	ori	r24, 0x06	; 6
  c2:	80 83       	st	Z, r24
	UBRR0=103; //set baud to 9600
  c4:	87 e6       	ldi	r24, 0x67	; 103
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  d0:	08 95       	ret

000000d2 <write_serial>:
}

void write_serial(uint8_t word){
	while((UCSR0A & 0x20)!=0x20){}
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	85 ff       	sbrs	r24, 5
  da:	fd cf       	rjmp	.-6      	; 0xd6 <write_serial+0x4>
		
		UDR0=48;
  dc:	80 e3       	ldi	r24, 0x30	; 48
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	while((UCSR0A & 0x40)!=0x40){}
  e2:	e0 ec       	ldi	r30, 0xC0	; 192
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	86 ff       	sbrs	r24, 6
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <write_serial+0x14>
	return;
  ec:	08 95       	ret

000000ee <main>:
uint8_t read_adc(void);

uint8_t ADC_value=0x00;

int main(void){
	DDRB=0x08;//0b00001000
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	84 b9       	out	0x04, r24	; 4
	DDRC=0x00;//0b00001000
  f2:	17 b8       	out	0x07, r1	; 7
	DDRD=0x02;//0x00000010
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	8a b9       	out	0x0a, r24	; 10

	//uint8_t count=2, values[3]={0,0,0};

	start_PWM();
  f8:	0e 94 48 00 	call	0x90	; 0x90 <start_PWM>
	set_PWM(127);
  fc:	8f e7       	ldi	r24, 0x7F	; 127
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <set_PWM>
	configure_UART();
 102:	0e 94 58 00 	call	0xb0	; 0xb0 <configure_UART>
	sei();
 106:	78 94       	sei
	
	while(1){
		
		write_serial(0);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 69 00 	call	0xd2	; 0xd2 <write_serial>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	98 e1       	ldi	r25, 0x18	; 24
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x26>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x30>
 11e:	00 00       	nop
 120:	f3 cf       	rjmp	.-26     	; 0x108 <main+0x1a>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
